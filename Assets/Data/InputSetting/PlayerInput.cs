//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/Data/InputSetting/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""游戏"",
            ""id"": ""eade0b78-2ece-444a-9186-c739fc7dc68c"",
            ""actions"": [
                {
                    ""name"": ""镜头控制"",
                    ""type"": ""Value"",
                    ""id"": ""139fe534-6254-4a4e-bf2a-dba79fbc801b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""附加操作"",
                    ""type"": ""Button"",
                    ""id"": ""c278be22-b91a-40fc-a8be-12c485a891ff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""2e09fd81-74ce-45eb-876c-0fb165b5eb76"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""镜头控制"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d80eb87d-aee7-4579-b7a1-ca0f17360ee5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""镜头控制"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""197bc454-3b77-4643-ae29-92589e917401"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""镜头控制"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4143148a-9d04-48e5-8a96-a27c01cbb81d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""镜头控制"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5c986802-b88a-4f80-be64-2a7f46641508"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""镜头控制"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1953f7f3-4bdf-4711-8a61-ffc461908c13"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""附加操作"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""全局控制"",
            ""id"": ""79e5acaa-6504-494b-8c4f-c5f9d0760b93"",
            ""actions"": [
                {
                    ""name"": ""左击"",
                    ""type"": ""Button"",
                    ""id"": ""347405c3-862f-4275-bd94-7ef24008c569"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""双击"",
                    ""type"": ""Button"",
                    ""id"": ""7e5ec070-d07b-4889-9ec0-929b75d8fb75"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""右击"",
                    ""type"": ""Button"",
                    ""id"": ""795a5018-862d-44d7-ba9f-338bee134638"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d9915b61-47da-4caf-9cfb-9ff905ae2b0f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""左击"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f56c7f4-f64e-482f-ba23-98d839081ebc"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""MultiTap(tapTime=0.2,tapDelay=0.3,pressPoint=0.5)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""双击"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""163a8f8f-540e-43ef-9fbd-0476109df63e"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""右击"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""d03d7784-a606-47dd-aa3d-c750f62a207e"",
            ""actions"": [
                {
                    ""name"": ""设置"",
                    ""type"": ""Button"",
                    ""id"": ""1789f358-685d-414e-b710-e9cb08ea566e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""189354b8-1f67-4e8f-8d0a-fdc24a4af30e"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""设置"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // 游戏
        m_游戏 = asset.FindActionMap("游戏", throwIfNotFound: true);
        m_游戏_镜头控制 = m_游戏.FindAction("镜头控制", throwIfNotFound: true);
        m_游戏_附加操作 = m_游戏.FindAction("附加操作", throwIfNotFound: true);
        // 全局控制
        m_全局控制 = asset.FindActionMap("全局控制", throwIfNotFound: true);
        m_全局控制_左击 = m_全局控制.FindAction("左击", throwIfNotFound: true);
        m_全局控制_双击 = m_全局控制.FindAction("双击", throwIfNotFound: true);
        m_全局控制_右击 = m_全局控制.FindAction("右击", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_设置 = m_UI.FindAction("设置", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // 游戏
    private readonly InputActionMap m_游戏;
    private I游戏Actions m_游戏ActionsCallbackInterface;
    private readonly InputAction m_游戏_镜头控制;
    private readonly InputAction m_游戏_附加操作;
    public struct 游戏Actions
    {
        private @PlayerInput m_Wrapper;
        public 游戏Actions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @镜头控制 => m_Wrapper.m_游戏_镜头控制;
        public InputAction @附加操作 => m_Wrapper.m_游戏_附加操作;
        public InputActionMap Get() { return m_Wrapper.m_游戏; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(游戏Actions set) { return set.Get(); }
        public void SetCallbacks(I游戏Actions instance)
        {
            if (m_Wrapper.m_游戏ActionsCallbackInterface != null)
            {
                @镜头控制.started -= m_Wrapper.m_游戏ActionsCallbackInterface.On镜头控制;
                @镜头控制.performed -= m_Wrapper.m_游戏ActionsCallbackInterface.On镜头控制;
                @镜头控制.canceled -= m_Wrapper.m_游戏ActionsCallbackInterface.On镜头控制;
                @附加操作.started -= m_Wrapper.m_游戏ActionsCallbackInterface.On附加操作;
                @附加操作.performed -= m_Wrapper.m_游戏ActionsCallbackInterface.On附加操作;
                @附加操作.canceled -= m_Wrapper.m_游戏ActionsCallbackInterface.On附加操作;
            }
            m_Wrapper.m_游戏ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @镜头控制.started += instance.On镜头控制;
                @镜头控制.performed += instance.On镜头控制;
                @镜头控制.canceled += instance.On镜头控制;
                @附加操作.started += instance.On附加操作;
                @附加操作.performed += instance.On附加操作;
                @附加操作.canceled += instance.On附加操作;
            }
        }
    }
    public 游戏Actions @游戏 => new 游戏Actions(this);

    // 全局控制
    private readonly InputActionMap m_全局控制;
    private I全局控制Actions m_全局控制ActionsCallbackInterface;
    private readonly InputAction m_全局控制_左击;
    private readonly InputAction m_全局控制_双击;
    private readonly InputAction m_全局控制_右击;
    public struct 全局控制Actions
    {
        private @PlayerInput m_Wrapper;
        public 全局控制Actions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @左击 => m_Wrapper.m_全局控制_左击;
        public InputAction @双击 => m_Wrapper.m_全局控制_双击;
        public InputAction @右击 => m_Wrapper.m_全局控制_右击;
        public InputActionMap Get() { return m_Wrapper.m_全局控制; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(全局控制Actions set) { return set.Get(); }
        public void SetCallbacks(I全局控制Actions instance)
        {
            if (m_Wrapper.m_全局控制ActionsCallbackInterface != null)
            {
                @左击.started -= m_Wrapper.m_全局控制ActionsCallbackInterface.On左击;
                @左击.performed -= m_Wrapper.m_全局控制ActionsCallbackInterface.On左击;
                @左击.canceled -= m_Wrapper.m_全局控制ActionsCallbackInterface.On左击;
                @双击.started -= m_Wrapper.m_全局控制ActionsCallbackInterface.On双击;
                @双击.performed -= m_Wrapper.m_全局控制ActionsCallbackInterface.On双击;
                @双击.canceled -= m_Wrapper.m_全局控制ActionsCallbackInterface.On双击;
                @右击.started -= m_Wrapper.m_全局控制ActionsCallbackInterface.On右击;
                @右击.performed -= m_Wrapper.m_全局控制ActionsCallbackInterface.On右击;
                @右击.canceled -= m_Wrapper.m_全局控制ActionsCallbackInterface.On右击;
            }
            m_Wrapper.m_全局控制ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @左击.started += instance.On左击;
                @左击.performed += instance.On左击;
                @左击.canceled += instance.On左击;
                @双击.started += instance.On双击;
                @双击.performed += instance.On双击;
                @双击.canceled += instance.On双击;
                @右击.started += instance.On右击;
                @右击.performed += instance.On右击;
                @右击.canceled += instance.On右击;
            }
        }
    }
    public 全局控制Actions @全局控制 => new 全局控制Actions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_设置;
    public struct UIActions
    {
        private @PlayerInput m_Wrapper;
        public UIActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @设置 => m_Wrapper.m_UI_设置;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @设置.started -= m_Wrapper.m_UIActionsCallbackInterface.On设置;
                @设置.performed -= m_Wrapper.m_UIActionsCallbackInterface.On设置;
                @设置.canceled -= m_Wrapper.m_UIActionsCallbackInterface.On设置;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @设置.started += instance.On设置;
                @设置.performed += instance.On设置;
                @设置.canceled += instance.On设置;
            }
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface I游戏Actions
    {
        void On镜头控制(InputAction.CallbackContext context);
        void On附加操作(InputAction.CallbackContext context);
    }
    public interface I全局控制Actions
    {
        void On左击(InputAction.CallbackContext context);
        void On双击(InputAction.CallbackContext context);
        void On右击(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void On设置(InputAction.CallbackContext context);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/Data/InputSetting/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""LocalPlayer"",
            ""id"": ""eade0b78-2ece-444a-9186-c739fc7dc68c"",
            ""actions"": [],
            ""bindings"": []
        },
        {
            ""name"": ""GlobalInput"",
            ""id"": ""79e5acaa-6504-494b-8c4f-c5f9d0760b93"",
            ""actions"": [
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""347405c3-862f-4275-bd94-7ef24008c569"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Hold"",
                    ""type"": ""Button"",
                    ""id"": ""546f0509-b692-49ca-b5ea-9687c510fe94"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Additional"",
                    ""type"": ""Button"",
                    ""id"": ""68bdbb79-3b53-4cf0-b4bf-7a139ef7ec6a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DoubleClick"",
                    ""type"": ""Button"",
                    ""id"": ""7e5ec070-d07b-4889-9ec0-929b75d8fb75"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""795a5018-862d-44d7-ba9f-338bee134638"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraControl"",
                    ""type"": ""Value"",
                    ""id"": ""1a5e7b2a-0b48-49b2-aaf8-8c8862a114d3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d9915b61-47da-4caf-9cfb-9ff905ae2b0f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e51be93-836b-484b-bed5-2bb7e6c5e3fb"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold(duration=0.4,pressPoint=0.5)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8cd5a1b3-cbf6-461a-bbb2-8ddc5e49ae47"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Additional"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f56c7f4-f64e-482f-ba23-98d839081ebc"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""MultiTap(tapTime=0.2,tapDelay=0.3,pressPoint=0.5)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoubleClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""163a8f8f-540e-43ef-9fbd-0476109df63e"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""4743c7ec-b3cd-48e1-9157-889024d4bd8d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraControl"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b9363f70-2969-4966-b479-133237df98d3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b0747f77-ef32-4129-8160-6d9dbb4d73bf"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""308128a2-8706-4aae-9800-69ad873b0253"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""20473e9f-082c-4f24-a91e-0ffaf5717c07"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // LocalPlayer
        m_LocalPlayer = asset.FindActionMap("LocalPlayer", throwIfNotFound: true);
        // GlobalInput
        m_GlobalInput = asset.FindActionMap("GlobalInput", throwIfNotFound: true);
        m_GlobalInput_LeftClick = m_GlobalInput.FindAction("LeftClick", throwIfNotFound: true);
        m_GlobalInput_Hold = m_GlobalInput.FindAction("Hold", throwIfNotFound: true);
        m_GlobalInput_Additional = m_GlobalInput.FindAction("Additional", throwIfNotFound: true);
        m_GlobalInput_DoubleClick = m_GlobalInput.FindAction("DoubleClick", throwIfNotFound: true);
        m_GlobalInput_RightClick = m_GlobalInput.FindAction("RightClick", throwIfNotFound: true);
        m_GlobalInput_CameraControl = m_GlobalInput.FindAction("CameraControl", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LocalPlayer
    private readonly InputActionMap m_LocalPlayer;
    private ILocalPlayerActions m_LocalPlayerActionsCallbackInterface;
    public struct LocalPlayerActions
    {
        private @PlayerInput m_Wrapper;
        public LocalPlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_LocalPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LocalPlayerActions set) { return set.Get(); }
        public void SetCallbacks(ILocalPlayerActions instance)
        {
            if (m_Wrapper.m_LocalPlayerActionsCallbackInterface != null)
            {
            }
            m_Wrapper.m_LocalPlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
            }
        }
    }
    public LocalPlayerActions @LocalPlayer => new LocalPlayerActions(this);

    // GlobalInput
    private readonly InputActionMap m_GlobalInput;
    private IGlobalInputActions m_GlobalInputActionsCallbackInterface;
    private readonly InputAction m_GlobalInput_LeftClick;
    private readonly InputAction m_GlobalInput_Hold;
    private readonly InputAction m_GlobalInput_Additional;
    private readonly InputAction m_GlobalInput_DoubleClick;
    private readonly InputAction m_GlobalInput_RightClick;
    private readonly InputAction m_GlobalInput_CameraControl;
    public struct GlobalInputActions
    {
        private @PlayerInput m_Wrapper;
        public GlobalInputActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftClick => m_Wrapper.m_GlobalInput_LeftClick;
        public InputAction @Hold => m_Wrapper.m_GlobalInput_Hold;
        public InputAction @Additional => m_Wrapper.m_GlobalInput_Additional;
        public InputAction @DoubleClick => m_Wrapper.m_GlobalInput_DoubleClick;
        public InputAction @RightClick => m_Wrapper.m_GlobalInput_RightClick;
        public InputAction @CameraControl => m_Wrapper.m_GlobalInput_CameraControl;
        public InputActionMap Get() { return m_Wrapper.m_GlobalInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GlobalInputActions set) { return set.Get(); }
        public void SetCallbacks(IGlobalInputActions instance)
        {
            if (m_Wrapper.m_GlobalInputActionsCallbackInterface != null)
            {
                @LeftClick.started -= m_Wrapper.m_GlobalInputActionsCallbackInterface.OnLeftClick;
                @LeftClick.performed -= m_Wrapper.m_GlobalInputActionsCallbackInterface.OnLeftClick;
                @LeftClick.canceled -= m_Wrapper.m_GlobalInputActionsCallbackInterface.OnLeftClick;
                @Hold.started -= m_Wrapper.m_GlobalInputActionsCallbackInterface.OnHold;
                @Hold.performed -= m_Wrapper.m_GlobalInputActionsCallbackInterface.OnHold;
                @Hold.canceled -= m_Wrapper.m_GlobalInputActionsCallbackInterface.OnHold;
                @Additional.started -= m_Wrapper.m_GlobalInputActionsCallbackInterface.OnAdditional;
                @Additional.performed -= m_Wrapper.m_GlobalInputActionsCallbackInterface.OnAdditional;
                @Additional.canceled -= m_Wrapper.m_GlobalInputActionsCallbackInterface.OnAdditional;
                @DoubleClick.started -= m_Wrapper.m_GlobalInputActionsCallbackInterface.OnDoubleClick;
                @DoubleClick.performed -= m_Wrapper.m_GlobalInputActionsCallbackInterface.OnDoubleClick;
                @DoubleClick.canceled -= m_Wrapper.m_GlobalInputActionsCallbackInterface.OnDoubleClick;
                @RightClick.started -= m_Wrapper.m_GlobalInputActionsCallbackInterface.OnRightClick;
                @RightClick.performed -= m_Wrapper.m_GlobalInputActionsCallbackInterface.OnRightClick;
                @RightClick.canceled -= m_Wrapper.m_GlobalInputActionsCallbackInterface.OnRightClick;
                @CameraControl.started -= m_Wrapper.m_GlobalInputActionsCallbackInterface.OnCameraControl;
                @CameraControl.performed -= m_Wrapper.m_GlobalInputActionsCallbackInterface.OnCameraControl;
                @CameraControl.canceled -= m_Wrapper.m_GlobalInputActionsCallbackInterface.OnCameraControl;
            }
            m_Wrapper.m_GlobalInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftClick.started += instance.OnLeftClick;
                @LeftClick.performed += instance.OnLeftClick;
                @LeftClick.canceled += instance.OnLeftClick;
                @Hold.started += instance.OnHold;
                @Hold.performed += instance.OnHold;
                @Hold.canceled += instance.OnHold;
                @Additional.started += instance.OnAdditional;
                @Additional.performed += instance.OnAdditional;
                @Additional.canceled += instance.OnAdditional;
                @DoubleClick.started += instance.OnDoubleClick;
                @DoubleClick.performed += instance.OnDoubleClick;
                @DoubleClick.canceled += instance.OnDoubleClick;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
                @CameraControl.started += instance.OnCameraControl;
                @CameraControl.performed += instance.OnCameraControl;
                @CameraControl.canceled += instance.OnCameraControl;
            }
        }
    }
    public GlobalInputActions @GlobalInput => new GlobalInputActions(this);
    public interface ILocalPlayerActions
    {
    }
    public interface IGlobalInputActions
    {
        void OnLeftClick(InputAction.CallbackContext context);
        void OnHold(InputAction.CallbackContext context);
        void OnAdditional(InputAction.CallbackContext context);
        void OnDoubleClick(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
        void OnCameraControl(InputAction.CallbackContext context);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/Data/InputSetting/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Game"",
            ""id"": ""eade0b78-2ece-444a-9186-c739fc7dc68c"",
            ""actions"": [
                {
                    ""name"": ""CameraControl"",
                    ""type"": ""Value"",
                    ""id"": ""139fe534-6254-4a4e-bf2a-dba79fbc801b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Additional"",
                    ""type"": ""Button"",
                    ""id"": ""c278be22-b91a-40fc-a8be-12c485a891ff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""2e09fd81-74ce-45eb-876c-0fb165b5eb76"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraControl"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d80eb87d-aee7-4579-b7a1-ca0f17360ee5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""197bc454-3b77-4643-ae29-92589e917401"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4143148a-9d04-48e5-8a96-a27c01cbb81d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5c986802-b88a-4f80-be64-2a7f46641508"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1953f7f3-4bdf-4711-8a61-ffc461908c13"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Additional"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GlobalInput"",
            ""id"": ""79e5acaa-6504-494b-8c4f-c5f9d0760b93"",
            ""actions"": [
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""347405c3-862f-4275-bd94-7ef24008c569"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DoubleClick"",
                    ""type"": ""Button"",
                    ""id"": ""7e5ec070-d07b-4889-9ec0-929b75d8fb75"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""795a5018-862d-44d7-ba9f-338bee134638"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d9915b61-47da-4caf-9cfb-9ff905ae2b0f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f56c7f4-f64e-482f-ba23-98d839081ebc"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""MultiTap(tapTime=0.2,tapDelay=0.3,pressPoint=0.5)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoubleClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""163a8f8f-540e-43ef-9fbd-0476109df63e"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""d03d7784-a606-47dd-aa3d-c750f62a207e"",
            ""actions"": [
                {
                    ""name"": ""InputSetting"",
                    ""type"": ""Button"",
                    ""id"": ""1789f358-685d-414e-b710-e9cb08ea566e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""189354b8-1f67-4e8f-8d0a-fdc24a4af30e"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InputSetting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_CameraControl = m_Game.FindAction("CameraControl", throwIfNotFound: true);
        m_Game_Additional = m_Game.FindAction("Additional", throwIfNotFound: true);
        // GlobalInput
        m_GlobalInput = asset.FindActionMap("GlobalInput", throwIfNotFound: true);
        m_GlobalInput_LeftClick = m_GlobalInput.FindAction("LeftClick", throwIfNotFound: true);
        m_GlobalInput_DoubleClick = m_GlobalInput.FindAction("DoubleClick", throwIfNotFound: true);
        m_GlobalInput_RightClick = m_GlobalInput.FindAction("RightClick", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_InputSetting = m_UI.FindAction("InputSetting", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Game
    private readonly InputActionMap m_Game;
    private IGameActions m_GameActionsCallbackInterface;
    private readonly InputAction m_Game_CameraControl;
    private readonly InputAction m_Game_Additional;
    public struct GameActions
    {
        private @PlayerInput m_Wrapper;
        public GameActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @CameraControl => m_Wrapper.m_Game_CameraControl;
        public InputAction @Additional => m_Wrapper.m_Game_Additional;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void SetCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterface != null)
            {
                @CameraControl.started -= m_Wrapper.m_GameActionsCallbackInterface.OnCameraControl;
                @CameraControl.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnCameraControl;
                @CameraControl.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnCameraControl;
                @Additional.started -= m_Wrapper.m_GameActionsCallbackInterface.OnAdditional;
                @Additional.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnAdditional;
                @Additional.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnAdditional;
            }
            m_Wrapper.m_GameActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CameraControl.started += instance.OnCameraControl;
                @CameraControl.performed += instance.OnCameraControl;
                @CameraControl.canceled += instance.OnCameraControl;
                @Additional.started += instance.OnAdditional;
                @Additional.performed += instance.OnAdditional;
                @Additional.canceled += instance.OnAdditional;
            }
        }
    }
    public GameActions @Game => new GameActions(this);

    // GlobalInput
    private readonly InputActionMap m_GlobalInput;
    private IGlobalInputActions m_GlobalInputActionsCallbackInterface;
    private readonly InputAction m_GlobalInput_LeftClick;
    private readonly InputAction m_GlobalInput_DoubleClick;
    private readonly InputAction m_GlobalInput_RightClick;
    public struct GlobalInputActions
    {
        private @PlayerInput m_Wrapper;
        public GlobalInputActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftClick => m_Wrapper.m_GlobalInput_LeftClick;
        public InputAction @DoubleClick => m_Wrapper.m_GlobalInput_DoubleClick;
        public InputAction @RightClick => m_Wrapper.m_GlobalInput_RightClick;
        public InputActionMap Get() { return m_Wrapper.m_GlobalInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GlobalInputActions set) { return set.Get(); }
        public void SetCallbacks(IGlobalInputActions instance)
        {
            if (m_Wrapper.m_GlobalInputActionsCallbackInterface != null)
            {
                @LeftClick.started -= m_Wrapper.m_GlobalInputActionsCallbackInterface.OnLeftClick;
                @LeftClick.performed -= m_Wrapper.m_GlobalInputActionsCallbackInterface.OnLeftClick;
                @LeftClick.canceled -= m_Wrapper.m_GlobalInputActionsCallbackInterface.OnLeftClick;
                @DoubleClick.started -= m_Wrapper.m_GlobalInputActionsCallbackInterface.OnDoubleClick;
                @DoubleClick.performed -= m_Wrapper.m_GlobalInputActionsCallbackInterface.OnDoubleClick;
                @DoubleClick.canceled -= m_Wrapper.m_GlobalInputActionsCallbackInterface.OnDoubleClick;
                @RightClick.started -= m_Wrapper.m_GlobalInputActionsCallbackInterface.OnRightClick;
                @RightClick.performed -= m_Wrapper.m_GlobalInputActionsCallbackInterface.OnRightClick;
                @RightClick.canceled -= m_Wrapper.m_GlobalInputActionsCallbackInterface.OnRightClick;
            }
            m_Wrapper.m_GlobalInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftClick.started += instance.OnLeftClick;
                @LeftClick.performed += instance.OnLeftClick;
                @LeftClick.canceled += instance.OnLeftClick;
                @DoubleClick.started += instance.OnDoubleClick;
                @DoubleClick.performed += instance.OnDoubleClick;
                @DoubleClick.canceled += instance.OnDoubleClick;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
            }
        }
    }
    public GlobalInputActions @GlobalInput => new GlobalInputActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_InputSetting;
    public struct UIActions
    {
        private @PlayerInput m_Wrapper;
        public UIActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @InputSetting => m_Wrapper.m_UI_InputSetting;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @InputSetting.started -= m_Wrapper.m_UIActionsCallbackInterface.OnInputSetting;
                @InputSetting.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnInputSetting;
                @InputSetting.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnInputSetting;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @InputSetting.started += instance.OnInputSetting;
                @InputSetting.performed += instance.OnInputSetting;
                @InputSetting.canceled += instance.OnInputSetting;
            }
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IGameActions
    {
        void OnCameraControl(InputAction.CallbackContext context);
        void OnAdditional(InputAction.CallbackContext context);
    }
    public interface IGlobalInputActions
    {
        void OnLeftClick(InputAction.CallbackContext context);
        void OnDoubleClick(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnInputSetting(InputAction.CallbackContext context);
    }
}
